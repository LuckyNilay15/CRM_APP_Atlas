{"ast":null,"code":"var _jsxFileName = \"/Users/lucky/Desktop/project-root/frontend/src/components/AudienceForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { createAudience } from \"../services/audienceService\";\nimport \"./styles/AudienceForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudienceForm = () => {\n  _s();\n  const [name, setName] = useState(\"\");\n  const [criteria, setCriteria] = useState(\"\");\n  const [showPopup, setShowPopup] = useState(false);\n  const [error, setError] = useState(\"\"); // State for error messages\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      setError(\"\"); // Clear any previous error\n      const parsedCriteria = JSON.parse(criteria); // Parse JSON string input from a text area\n      const response = await createAudience(name, parsedCriteria);\n      console.log(\"Audience Created:\", response);\n      setShowPopup(true); // Show success popup\n      setTimeout(() => setShowPopup(false), 3000); // Hide popup after 3 seconds\n      setName(\"\"); // Reset form\n      setCriteria(\"\");\n    } catch (error) {\n      console.error(\"Error creating audience:\", error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Audience Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        value: name,\n        onChange: e => setName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"criteria\",\n        children: \"Criteria (JSON):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"criteria\",\n        value: criteria,\n        onChange: e => setCriteria(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Create Audience\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(AudienceForm, \"SoQDT/r7jspCnQMgHuWGMpQAX84=\");\n_c = AudienceForm;\nexport default AudienceForm;\nvar _c;\n$RefreshReg$(_c, \"AudienceForm\");","map":{"version":3,"names":["React","useState","createAudience","jsxDEV","_jsxDEV","AudienceForm","_s","name","setName","criteria","setCriteria","showPopup","setShowPopup","error","setError","handleSubmit","e","preventDefault","parsedCriteria","JSON","parse","response","console","log","setTimeout","message","onSubmit","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","value","onChange","target","_c","$RefreshReg$"],"sources":["/Users/lucky/Desktop/project-root/frontend/src/components/AudienceForm.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { createAudience } from \"../services/audienceService\";\nimport \"./styles/AudienceForm.css\";\nconst AudienceForm = () => {\n  const [name, setName] = useState(\"\");\n  const [criteria, setCriteria] = useState(\"\");\n  const [showPopup, setShowPopup] = useState(false);\n  const [error, setError] = useState(\"\"); // State for error messages\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    try {\n      setError(\"\"); // Clear any previous error\n      const parsedCriteria = JSON.parse(criteria); // Parse JSON string input from a text area\n      const response = await createAudience(name, parsedCriteria);\n      console.log(\"Audience Created:\", response);\n      setShowPopup(true); // Show success popup\n      setTimeout(() => setShowPopup(false), 3000); // Hide popup after 3 seconds\n      setName(\"\"); // Reset form\n      setCriteria(\"\");\n    } catch (error) {\n      console.error(\"Error creating audience:\", error.message);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <label htmlFor=\"name\">Audience Name:</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"criteria\">Criteria (JSON):</label>\n        <textarea\n          id=\"criteria\"\n          value={criteria}\n          onChange={(e) => setCriteria(e.target.value)}\n        />\n      </div>\n      <button type=\"submit\">Create Audience</button>\n    </form>\n  );\n};\n\nexport default AudienceForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}